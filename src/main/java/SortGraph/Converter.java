package SortGraph;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ebrar
 */
public class Converter extends javax.swing.JFrame {

    /**
     * Creates new form Converter
     */
    DefaultListModel dlm1 = new DefaultListModel();
    DefaultListModel dlm2 = new DefaultListModel();
    int array[];
    SortClass sort = new SortClass();
    double heap_sortMatrix[][] = new double[7][2];
    double bubble_sortMatrix[][] = new double[7][2];
    double merge_sortMatrix[][] = new double[7][2];
    double quick_sortMatrix[][] = new double[7][2];
    double selection_sortMatrix[][] = new double[7][2];
    double insertion_sortMatrix[][] = new double[7][2];
    int sizeofArraylength[] = {10, 100, 1000, 10000, 50000, 100000, 500000};

    public Converter() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        ArrayLength = new javax.swing.JTextField();
        RandomArrayButton = new javax.swing.JButton();
        Heap_Sort_Button = new javax.swing.JRadioButton();
        Bubble_Sort_Button = new javax.swing.JRadioButton();
        Insertion_Sort_button = new javax.swing.JRadioButton();
        Selection_sort_button = new javax.swing.JRadioButton();
        Quick_sort_button = new javax.swing.JRadioButton();
        Merge_Sort_button = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Sorting_Time = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        No_Sorting_jList = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        yes_sorting_jList = new javax.swing.JList<>();
        NameOfSorting = new javax.swing.JTextField();
        show_button = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SORTING");

        jLabel1.setText("Array Length:");

        ArrayLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArrayLengthActionPerformed(evt);
            }
        });

        RandomArrayButton.setText("Generate Random Array");
        RandomArrayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomArrayButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(Heap_Sort_Button);
        Heap_Sort_Button.setText("Heap Sort");
        Heap_Sort_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Heap_Sort_ButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(Bubble_Sort_Button);
        Bubble_Sort_Button.setText("Bubble Sort");
        Bubble_Sort_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bubble_Sort_ButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(Insertion_Sort_button);
        Insertion_Sort_button.setText("Insertion Sort");
        Insertion_Sort_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Insertion_Sort_buttonActionPerformed(evt);
            }
        });

        buttonGroup1.add(Selection_sort_button);
        Selection_sort_button.setText("Selection Sort");
        Selection_sort_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Selection_sort_buttonActionPerformed(evt);
            }
        });

        buttonGroup1.add(Quick_sort_button);
        Quick_sort_button.setText("Quick Sort");
        Quick_sort_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Quick_sort_buttonActionPerformed(evt);
            }
        });

        buttonGroup1.add(Merge_Sort_button);
        Merge_Sort_button.setText("Merge Sort");
        Merge_Sort_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Merge_Sort_buttonActionPerformed(evt);
            }
        });

        jLabel2.setText("Sorted Array");

        jLabel3.setText("Sorting Time");

        jScrollPane4.setViewportView(No_Sorting_jList);

        jScrollPane5.setViewportView(yes_sorting_jList);

        show_button.setText("Show Graphic");
        show_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Quick_sort_button)
                            .addComponent(Merge_Sort_button)
                            .addComponent(Selection_sort_button)
                            .addComponent(Insertion_Sort_button)
                            .addComponent(Bubble_Sort_Button)
                            .addComponent(Heap_Sort_Button)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(19, 19, 19)
                        .addComponent(Sorting_Time, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(show_button))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ArrayLength, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RandomArrayButton)
                        .addGap(48, 48, 48)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NameOfSorting, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(ArrayLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RandomArrayButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addComponent(NameOfSorting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(Heap_Sort_Button)
                        .addGap(18, 18, 18)
                        .addComponent(Bubble_Sort_Button)
                        .addGap(18, 18, 18)
                        .addComponent(Insertion_Sort_button)
                        .addGap(23, 23, 23)
                        .addComponent(Selection_sort_button)
                        .addGap(18, 18, 18)
                        .addComponent(Quick_sort_button)
                        .addGap(18, 18, 18)
                        .addComponent(Merge_Sort_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Sorting_Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(show_button)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ArrayLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArrayLengthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ArrayLengthActionPerformed

    private void Heap_Sort_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Heap_Sort_ButtonActionPerformed
        // TODO add your handling code here:

        NameOfSorting.setText("Heap Sort");
        Sorting_Time.setText("");
        long time1 = System.nanoTime();
        dlm2.clear();
        if (ArrayLength.getText().isEmpty()) {
            return;
        }
        sort.HeapSort(array);
        for (int i = 0; i < array.length; i++) {
            dlm2.addElement(array[i]);
        }
        yes_sorting_jList.setModel(dlm2);
        long time2 = System.nanoTime();
        double sortingtime = (double) ((time2 - time1) / (1000000.0));
        Sorting_Time.setText(sortingtime + "");

        int okunan = Integer.parseInt(ArrayLength.getText());
        System.out.println("Heap------------------------------------");
        for (int i = 0; i < sizeofArraylength.length; i++) {
            if (sizeofArraylength[i] == okunan) {
                heap_sortMatrix[i][0] = okunan;
                heap_sortMatrix[i][1] = sortingtime;
            }
        }
        for (int i = 0; i < heap_sortMatrix.length; i++) {
            for (int j = 0; j < heap_sortMatrix[i].length; j++) {
                System.out.println(heap_sortMatrix[i][j]);

            }
            System.out.println("");
        }
    }//GEN-LAST:event_Heap_Sort_ButtonActionPerformed

    private void Bubble_Sort_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bubble_Sort_ButtonActionPerformed
        // TODO add your handling code here:
        NameOfSorting.setText("Bubble Sort");
        Sorting_Time.setText("");
        long time1 = System.nanoTime();
        dlm2.clear();
        if (ArrayLength.getText().isEmpty()) {
            return;
        }
        sort.bubbleSort(array);
        for (int i = 0; i < array.length; i++) {
            dlm2.addElement(array[i]);
        }
        yes_sorting_jList.setModel(dlm2);
        long time2 = System.nanoTime();
        double sortingtime = (double) ((time2 - time1) / (1000000.0));
        Sorting_Time.setText(sortingtime + "");
        int okunan = Integer.parseInt(ArrayLength.getText());
        System.out.println("Bubble----------------------------------------");
        for (int i = 0; i < sizeofArraylength.length; i++) {
            if (sizeofArraylength[i] == okunan) {
                bubble_sortMatrix[i][0] = okunan;
                bubble_sortMatrix[i][1] = sortingtime;
            }
        }

        for (int i = 0; i < bubble_sortMatrix.length; i++) {
            for (int j = 0; j < bubble_sortMatrix[i].length; j++) {
                System.out.println(bubble_sortMatrix[i][j]);

            }
            System.out.println("");
        }
    }//GEN-LAST:event_Bubble_Sort_ButtonActionPerformed

    private void Insertion_Sort_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Insertion_Sort_buttonActionPerformed
        // TODO add your handling code here:
        NameOfSorting.setText("İnsertion Sort");
        Sorting_Time.setText("");
        long time1 = System.nanoTime();
        dlm2.clear();
        if (ArrayLength.getText().isEmpty()) {
            return;
        }
        sort.Insertion_sort(array);
        for (int i = 0; i < array.length; i++) {
            dlm2.addElement(array[i]);
        }
        yes_sorting_jList.setModel(dlm2);
        long time2 = System.nanoTime();
        double sortingtime = (double) ((time2 - time1) / (1000000.0));
        Sorting_Time.setText(sortingtime + "");

        int okunan = Integer.parseInt(ArrayLength.getText());
        System.out.println("insertion------------------------------");
        for (int i = 0; i < sizeofArraylength.length; i++) {
            if (sizeofArraylength[i] == okunan) {
                insertion_sortMatrix[i][0] = okunan;
                insertion_sortMatrix[i][1] = sortingtime;
            }
        }
        for (int i = 0; i < insertion_sortMatrix.length; i++) {
            for (int j = 0; j < insertion_sortMatrix[i].length; j++) {
                System.out.println(insertion_sortMatrix[i][j]);

            }
            System.out.println("");
        }
    }//GEN-LAST:event_Insertion_Sort_buttonActionPerformed

    private void Selection_sort_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Selection_sort_buttonActionPerformed
        // TODO add your handling code here:
        NameOfSorting.setText("Selection sort");
        Sorting_Time.setText("");
        long time1 = System.nanoTime();
        dlm2.clear();
        if (ArrayLength.getText().isEmpty()) {
            return;
        }
        sort.Selection_sort(array);
        for (int i = 0; i < array.length; i++) {
            dlm2.addElement(array[i]);
        }
        yes_sorting_jList.setModel(dlm2);
        long time2 = System.nanoTime();
        double sortingtime = (double) ((time2 - time1) / (1000000.0));
        Sorting_Time.setText(sortingtime + "");
        int okunan = Integer.parseInt(ArrayLength.getText());
        System.out.println("selection----------------------------------");
        for (int i = 0; i < sizeofArraylength.length; i++) {
            if (sizeofArraylength[i] == okunan) {
                selection_sortMatrix[i][0] = okunan;
                selection_sortMatrix[i][1] = sortingtime;
            }
        }

        for (int i = 0; i < selection_sortMatrix.length; i++) {
            for (int j = 0; j < selection_sortMatrix[i].length; j++) {
                System.out.println(selection_sortMatrix[i][j]);

            }
            System.out.println("");
        }
    }//GEN-LAST:event_Selection_sort_buttonActionPerformed

    private void Quick_sort_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Quick_sort_buttonActionPerformed
        // TODO add your handling code here:
        NameOfSorting.setText("Quick sort");
        Sorting_Time.setText("");
        long time1 = System.nanoTime();
        dlm2.clear();
        if (ArrayLength.getText().isEmpty()) {
            return;
        }
        sort.quickSort(array, 0, array.length - 1);
        for (int i = 0; i < array.length; i++) {
            dlm2.addElement(array[i]);
        }
        yes_sorting_jList.setModel(dlm2);
        long time2 = System.nanoTime();
        double sortingtime = (double) ((time2 - time1) / (1000000.0));
        Sorting_Time.setText(sortingtime + "");
        int okunan = Integer.parseInt(ArrayLength.getText());
        System.out.println("Quick--------------------------------");
        for (int i = 0; i < sizeofArraylength.length; i++) {
            if (sizeofArraylength[i] == okunan) {
                quick_sortMatrix[i][0] = okunan;
                quick_sortMatrix[i][1] = sortingtime;
            }
        }

        for (int i = 0; i < quick_sortMatrix.length; i++) {
            for (int j = 0; j < quick_sortMatrix[i].length; j++) {
                System.out.println(quick_sortMatrix[i][j]);

            }
            System.out.println("");
        }
    }//GEN-LAST:event_Quick_sort_buttonActionPerformed

    private void Merge_Sort_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Merge_Sort_buttonActionPerformed
        // TODO add your handling code here:
        NameOfSorting.setText("Merge Sort");
        Sorting_Time.setText("");
        dlm2.clear();
        long time1 = System.nanoTime();
        if (ArrayLength.getText().isEmpty()) {
            return;
        }
        sort.sort_M(array, 0, array.length - 1);
        for (int i = 0; i < array.length; i++) {
            dlm2.addElement(array[i]);
        }
        yes_sorting_jList.setModel(dlm2);
        long time2 = System.nanoTime();
        double sortingtime = (double) ((time2 - time1) / (1000000.0));
        Sorting_Time.setText(sortingtime + "");
        int okunan = Integer.parseInt(ArrayLength.getText());
        System.out.println("Merge--------------------------------");
        for (int i = 0; i < sizeofArraylength.length; i++) {
            if (sizeofArraylength[i] == okunan) {
                merge_sortMatrix[i][0] = okunan;
                merge_sortMatrix[i][1] = sortingtime;
            }
        }
        for (int i = 0; i < merge_sortMatrix.length; i++) {
            for (int j = 0; j < merge_sortMatrix[i].length; j++) {
                System.out.println(merge_sortMatrix[i][j]);

            }
            System.out.println("");
        }

    }//GEN-LAST:event_Merge_Sort_buttonActionPerformed

    private void RandomArrayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomArrayButtonActionPerformed
        dlm1.clear();
        array = new int[Integer.parseInt(ArrayLength.getText())];
        for (int i = 0; i < array.length; i++) {
            array[i] = (int) (Math.random() * 100 + 1);
            dlm1.addElement(array[i]);
        }
        No_Sorting_jList.setModel(dlm1);

    }//GEN-LAST:event_RandomArrayButtonActionPerformed

    private void show_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show_buttonActionPerformed
        // TODO add your handling code here:
        if (Heap_Sort_Button.isSelected()) {
            for (int i = 0; i < heap_sortMatrix.length; i++) {
                for (int j = 0; j < heap_sortMatrix[i].length; j++) {
                    if (heap_sortMatrix[i][0] == 0.0) {
                        JOptionPane.showMessageDialog(this, "lütfen Heap Sorting için " + sizeofArraylength[i] + " değerini giriniz");
                        return;
                    }
                }
            }
            Graph.matrix = heap_sortMatrix;
            Graph.main(null);
        }
        if (Selection_sort_button.isSelected()) {
            for (int i = 0; i < selection_sortMatrix.length; i++) {
                for (int j = 0; j < selection_sortMatrix[i].length; j++) {
                    if (selection_sortMatrix[i][j] == 0.0) {
                        JOptionPane.showMessageDialog(this, "lütfen Selection Sorting için " + sizeofArraylength[i] + " değerini giriniz");
                        return;
                    }
                }
            }
            Graph.matrix = selection_sortMatrix;
            Graph.main(null);
        }
        if (Merge_Sort_button.isSelected()) {
            for (int i = 0; i < merge_sortMatrix.length; i++) {
                for (int j = 0; j < merge_sortMatrix[i].length; j++) {
                    if (merge_sortMatrix[i][j] == 0.0) {
                        JOptionPane.showMessageDialog(this, "lütfen Merge Sorting için " + sizeofArraylength[i] + " değerini giriniz");
                        return;
                    }
                }
            }
            Graph.matrix = merge_sortMatrix;
            Graph.main(null);
        }
        if (Insertion_Sort_button.isSelected()) {
            for (int i = 0; i < insertion_sortMatrix.length; i++) {
                for (int j = 0; j < insertion_sortMatrix[i].length; j++) {
                    if (insertion_sortMatrix[i][j] == 0.0) {
                        JOptionPane.showMessageDialog(this, "lütfen Insertion Sorting için " + sizeofArraylength[i] + " değerini giriniz");
                        return;
                    }
                }
            }
            Graph.matrix = insertion_sortMatrix;
            Graph.main(null);
        }
        if (Quick_sort_button.isSelected()) {
            for (int i = 0; i < quick_sortMatrix.length; i++) {
                for (int j = 0; j < quick_sortMatrix[i].length; j++) {
                    if (quick_sortMatrix[i][j] == 0.0) {
                        JOptionPane.showMessageDialog(this, "lütfen Quick Sorting için " + sizeofArraylength[i] + " değerini giriniz");
                        return;
                    }
                }
            }
            Graph.matrix = quick_sortMatrix;
            Graph.main(null);
        }
        if (Bubble_Sort_Button.isSelected()) {
            for (int i = 0; i < bubble_sortMatrix.length; i++) {
                for (int j = 0; j < bubble_sortMatrix[i].length; j++) {
                    if (bubble_sortMatrix[i][j] == 0.0) {
                        JOptionPane.showMessageDialog(this, "lütfen Bubble Sorting için " + sizeofArraylength[i] + " değerini giriniz");
                        return;
                    }
                }
            }
            Graph.matrix = bubble_sortMatrix;
            Graph.main(null);
        }


    }//GEN-LAST:event_show_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Converter.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Converter.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Converter.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Converter.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Converter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ArrayLength;
    private javax.swing.JRadioButton Bubble_Sort_Button;
    private javax.swing.JRadioButton Heap_Sort_Button;
    private javax.swing.JRadioButton Insertion_Sort_button;
    private javax.swing.JRadioButton Merge_Sort_button;
    private javax.swing.JTextField NameOfSorting;
    private javax.swing.JList<String> No_Sorting_jList;
    private javax.swing.JRadioButton Quick_sort_button;
    private javax.swing.JButton RandomArrayButton;
    private javax.swing.JRadioButton Selection_sort_button;
    private javax.swing.JTextField Sorting_Time;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton show_button;
    private javax.swing.JList<String> yes_sorting_jList;
    // End of variables declaration//GEN-END:variables
}
